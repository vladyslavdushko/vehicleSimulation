
@page "/"

<div class="container">
    <h3 style="text-align: center;">Vehicle Simulation App</h3>
    
    <InputFile OnChange="HandleFileSelected" />
    <button @onclick="DrawMachines">Намалювати</button>

    <div class="translate-container">
        <div class="inner-translate-container">
            <h4>Зсуви для Машини 1</h4>
            <label>X Translate:</label>
            <input type="number" @bind="machine1XTranslate" />
            <label>Y Translate:</label>
            <input type="number" @bind="machine1YTranslate" />
            <button @onclick="UpdateMachine1Position">Перемістити Машину 1</button>
        </div>
        <div class="inner-translate-container">
            <h4>Зсуви для Машини 2</h4>
            <label>X Translate:</label>
            <input type="number" @bind="machine2XTranslate" />
            <label>Y Translate:</label>
            <input type="number" @bind="machine2YTranslate" />
            <button @onclick="UpdateMachine2Position">Перемістити Машину 2</button>
        </div>
    </div>

    <div class="rotate-container">
        <div class="inner-rotate-container">
            <label>Кут обертання для Машини 1:</label>
            <input type="number" @bind="machine1Rotation" />
            <button @onclick="RotateMachine1">Обертати Машину 1</button>
        </div>
        
        <div class="inner-rotate-container">
            <label>Кут обертання для Машини 2:</label>
            <input type="number" @bind="machine2Rotation" />
            <button @onclick="RotateMachine2">Обертати Машину 2</button>
        </div>
    </div>

    <div class="draw-container">
        <h4>Малювання Ліній</h4>
        <label>Start X:</label>
        <input type="number" @bind="startX" />
        <label>Start Y:</label>
        <input type="number" @bind="startY" />
        <label>End X:</label>
        <input type="number" @bind="endX" />
        <label>End Y:</label>
        <input type="number" @bind="endY" />
        <button @onclick="DrawLine">Намалювати Лінію</button>
    </div>

    <div class="intersection-container">
        <h4>Пошук Перетинів</h4>
        <label>Виберіть машину для перевірки перетинів:</label>
        <select @bind="selectedMachine">
            <option value="1">Машина 1</option>
            <option value="2">Машина 2</option>
        </select>
        <button @onclick="FindAllIntersections">Знайти Перетини</button>
    </div>

    <div class="mirror-container">
        <h4>Відображення Машини 1 по X</h4>
        <button @onclick="MirrorMachine1">Відобразити Машину 1 по X</button>
    </div>

    <button @onclick="ClearCanvas">Очистити Канвас</button>

<div style="position: relative; width: 800px; height: 160px; border:1px solid black;">
    <canvas id="linesCanvas" width="2000" height="400" style="width: 800px; height: 160px;"></canvas>
    <canvas id="machinesCanvas" width="2000" height="400" style="position: absolute; left: 0; top: 0; width: 800px; height: 160px;"></canvas>
    <canvas id="intersectionsCanvas" width="2000" height="400" style="position: absolute; left: 0; top: 0; width: 800px; height: 160px;"></canvas>
</div>


    <div class="messages">
        <h4>Результати для Машини 1:</h4>
        <p>@Machine1Message</p>
    </div>
    <div class="messages">
        <h4>Результати для Машини 2:</h4>
        <p>@Machine2Message</p>
    </div>
</div>

@code {
    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;

    private double machine1XTranslate = 0;
    private double machine1YTranslate = 0;
    private double machine2XTranslate = 0;
    private double machine2YTranslate = 0;

    private double machine1Rotation = 0;
    private double machine2Rotation = 0;

    private double startX = 0;
    private double startY = 0;
    private double endX = 0;
    private double endY = 0;

    private List<string[]> machine1Points = new();
    private List<string[]> machine2Points = new();

    private int selectedMachine = 1; 

    private string Machine1Message { get; set; } = "";
    private string Machine2Message { get; set; } = "";

    private DotNetObjectReference<Pages.Home>? objRef;

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("drawAllMachines");
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var points = await ReadPointsFromFileAsync(file);
            machine1Points = points;
            machine2Points = points.Select(p => new string[] { (Convert.ToDouble(p[0]) + 400).ToString(), p[1] }).ToList();
        }
    }

    private async Task<List<string[]>> ReadPointsFromFileAsync(IBrowserFile file)
    {
        var points = new List<string[]>();

        using var stream = file.OpenReadStream();
        using var reader = new StreamReader(stream);
        string? line;
        bool isFirstLine = true;
        while ((line = await reader.ReadLineAsync()) != null)
        {
            if (isFirstLine)
            {
                isFirstLine = false;
                continue;
            }
            var parts = line.Split('\t');
            if (parts.Length == 2 && double.TryParse(parts[0], out _) && double.TryParse(parts[1], out _))
            {
                points.Add(parts);
            }
        }

        return points;
    }

    private async Task DrawMachines()
    {
        await JSRuntime.InvokeVoidAsync("drawMachines", objRef, machine1Points, machine2Points);
    }

    private async Task RotateMachine1()
    {
        await JSRuntime.InvokeVoidAsync("rotateMachine", 1, machine1Rotation);
    }

    private async Task RotateMachine2()
    {
        await JSRuntime.InvokeVoidAsync("rotateMachine", 2, machine2Rotation);
    }

    private async Task DrawLine()
    {
        await JSRuntime.InvokeVoidAsync("drawLine", startX, startY, endX, endY);
    }

    private async Task ClearCanvas()
    {
        await JSRuntime.InvokeVoidAsync("clearCanvas");
    }

    private async Task UpdateMachine1Position()
    {
        await JSRuntime.InvokeVoidAsync("moveMachine", 1, machine1XTranslate, machine1YTranslate);
    }

    private async Task UpdateMachine2Position()
    {
        await JSRuntime.InvokeVoidAsync("moveMachine", 2, machine2XTranslate, machine2YTranslate);
    }

    private async Task FindAllIntersections()
    {
        await JSRuntime.InvokeVoidAsync("findAllIntersections", selectedMachine);
    }

    private async Task MirrorMachine1()
    {
        await JSRuntime.InvokeVoidAsync("mirrorMachine1");
    }

    [JSInvokable]
    public void UpdateMessage(int machineId, string message)
    {
        if (machineId == 1)
        {
            Machine1Message = message;
        }
        else if (machineId == 2)
        {
            Machine2Message = message;
        }
        InvokeAsync(StateHasChanged);
    }
}
